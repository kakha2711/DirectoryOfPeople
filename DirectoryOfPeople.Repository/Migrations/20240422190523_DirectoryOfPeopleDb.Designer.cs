// <auto-generated />
using System;
using DirectoryOfPeople.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DirectoryOfPeople.Repository.Migrations
{
    [DbContext(typeof(DirectoryOfPeopleDbContext))]
    [Migration("20240422190523_DirectoryOfPeopleDb")]
    partial class DirectoryOfPeopleDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DirectoryOfPeople.DTO.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.ContactInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ContactNamber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<byte>("ContactName")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("ContactInformation");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.Property<int?>("PersonIdentification")
                        .HasColumnType("int");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PictureAddres")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.PersonalityConnection", b =>
                {
                    b.Property<int>("ToPersonID")
                        .HasColumnType("int");

                    b.Property<int>("FromPersonID")
                        .HasColumnType("int");

                    b.Property<byte>("ConnectionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("ToPersonID", "FromPersonID")
                        .HasName("ToPersonID");

                    b.HasIndex("FromPersonID");

                    b.ToTable("PersonalityConnections");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.ContactInformation", b =>
                {
                    b.HasOne("DirectoryOfPeople.DTO.Person", "Person")
                        .WithMany("ContactInformation")
                        .HasForeignKey("PersonID");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.Person", b =>
                {
                    b.HasOne("DirectoryOfPeople.DTO.City", "City")
                        .WithMany("Persons")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.PersonalityConnection", b =>
                {
                    b.HasOne("DirectoryOfPeople.DTO.Person", "FromPerson")
                        .WithMany("FromPersonalityConnection")
                        .HasForeignKey("FromPersonID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DirectoryOfPeople.DTO.Person", "ToPerson")
                        .WithMany("ToPersonalityConnection")
                        .HasForeignKey("ToPersonID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromPerson");

                    b.Navigation("ToPerson");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.City", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DirectoryOfPeople.DTO.Person", b =>
                {
                    b.Navigation("ContactInformation");

                    b.Navigation("FromPersonalityConnection");

                    b.Navigation("ToPersonalityConnection");
                });
#pragma warning restore 612, 618
        }
    }
}
